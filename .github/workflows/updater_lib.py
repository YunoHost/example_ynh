#!/usr/bin/env python3
"""
This script is meant to be imported by updater.py.

MAINTAINERS: DO NOT EDIT THIS FILE! EDIT updater.py INSTEAD.
"""

from typing import Callable, Tuple, Any
import hashlib
import json
import logging
import os
import subprocess
import textwrap
import requests
from packaging import version

logging.getLogger().setLevel(logging.INFO)


def sha256sum_of_url(url: str) -> str:
    """Compute checksum without saving the file"""
    checksum = hashlib.sha256()
    for chunk in requests.get(url, stream=True, timeout=1000).iter_content(10 * 1024):
        checksum.update(chunk)
    return checksum.hexdigest()


def write_src_file(name: str, asset_url: str, extension: str,
                   extract: bool = True, subdir: bool = True) -> None:
    """Rewrite conf/app.src"""
    logging.info("Writing %s...", name)

    with open(f"conf/{name}", "w", encoding="utf-8") as conf_file:
        conf_file.write(textwrap.dedent(f"""\
            SOURCE_URL={asset_url}
            SOURCE_SUM={sha256sum_of_url(asset_url)}
            SOURCE_SUM_PRG=sha256sum
            SOURCE_FORMAT={extension}
            SOURCE_IN_SUBDIR={str(subdir).lower()}
            SOURCE_EXTRACT={str(extract).lower()}
        """))


def write_github_env(proceed: bool, new_version: str, branch: str):
    """Those values will be used later in the workflow"""
    if "GITHUB_ENV" not in os.environ:
        logging.warning("GITHUB_ENV is not in the envvars, assuming not in CI")
        return
    with open(os.environ["GITHUB_ENV"], "w", encoding="utf-8") as github_env:
        github_env.write(textwrap.dedent(f"""\
            VERSION={new_version}
            BRANCH={branch}
            PROCEED={str(proceed).lower()}
        """))


def run(
    get_latest_version: Callable[[str], Tuple[version.Version, Any]],
    generate_src_files: Callable[[str, Any], Any]
):
    with open("manifest.json", "r", encoding="utf-8") as manifest_file:
        manifest = json.load(manifest_file)
    repo = manifest["upstream"]["code"]

    current_version = version.Version(manifest["version"].split("~")[0])
    latest_version, release_info = get_latest_version(repo)
    logging.info("Current version: %s", current_version)
    logging.info("Latest upstream version: %s", latest_version)

    # Proceed only if the retrieved version is greater than the current one
    if latest_version <= current_version:
        logging.warning("No new version available")
        write_github_env(False, "", "")
        return

    # Proceed only if a PR for this new version does not already exist
    branch = f"ci-auto-update-v{latest_version}"
    command = ["git", "ls-remote", "--exit-code", "-h", repo, branch]
    if subprocess.run(command, capture_output=True, check=False).returncode == 0:
        logging.warning("A branch already exists for this update")
        write_github_env(False, "", "")
        return

    generate_src_files(repo, release_info)

    manifest["version"] = f"{latest_version}~ynh1"
    with open("manifest.json", "w", encoding="utf-8") as manifest_file:
        json.dump(manifest, manifest_file, indent=4, ensure_ascii=False)
        manifest_file.write("\n")

    write_github_env(True, str(latest_version), branch)
